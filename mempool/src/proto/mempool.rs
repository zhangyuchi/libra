// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mempool.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct AddTransactionWithValidationRequest {
    // message fields
    pub signed_txn: ::protobuf::SingularPtrField<super::transaction::SignedTransaction>,
    pub max_gas_cost: u64,
    pub latest_sequence_number: u64,
    pub account_balance: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddTransactionWithValidationRequest {
    fn default() -> &'a AddTransactionWithValidationRequest {
        <AddTransactionWithValidationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddTransactionWithValidationRequest {
    pub fn new() -> AddTransactionWithValidationRequest {
        ::std::default::Default::default()
    }

    // .types.SignedTransaction signed_txn = 1;


    pub fn get_signed_txn(&self) -> &super::transaction::SignedTransaction {
        self.signed_txn.as_ref().unwrap_or_else(|| super::transaction::SignedTransaction::default_instance())
    }
    pub fn clear_signed_txn(&mut self) {
        self.signed_txn.clear();
    }

    pub fn has_signed_txn(&self) -> bool {
        self.signed_txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_txn(&mut self, v: super::transaction::SignedTransaction) {
        self.signed_txn = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_txn(&mut self) -> &mut super::transaction::SignedTransaction {
        if self.signed_txn.is_none() {
            self.signed_txn.set_default();
        }
        self.signed_txn.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_txn(&mut self) -> super::transaction::SignedTransaction {
        self.signed_txn.take().unwrap_or_else(|| super::transaction::SignedTransaction::new())
    }

    // uint64 max_gas_cost = 2;


    pub fn get_max_gas_cost(&self) -> u64 {
        self.max_gas_cost
    }
    pub fn clear_max_gas_cost(&mut self) {
        self.max_gas_cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_gas_cost(&mut self, v: u64) {
        self.max_gas_cost = v;
    }

    // uint64 latest_sequence_number = 3;


    pub fn get_latest_sequence_number(&self) -> u64 {
        self.latest_sequence_number
    }
    pub fn clear_latest_sequence_number(&mut self) {
        self.latest_sequence_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_latest_sequence_number(&mut self, v: u64) {
        self.latest_sequence_number = v;
    }

    // uint64 account_balance = 4;


    pub fn get_account_balance(&self) -> u64 {
        self.account_balance
    }
    pub fn clear_account_balance(&mut self) {
        self.account_balance = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_balance(&mut self, v: u64) {
        self.account_balance = v;
    }
}

impl ::protobuf::Message for AddTransactionWithValidationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_txn {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_txn)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_gas_cost = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.latest_sequence_number = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_balance = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_txn.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.max_gas_cost != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_gas_cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.latest_sequence_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.latest_sequence_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.account_balance != 0 {
            my_size += ::protobuf::rt::value_size(4, self.account_balance, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_txn.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.max_gas_cost != 0 {
            os.write_uint64(2, self.max_gas_cost)?;
        }
        if self.latest_sequence_number != 0 {
            os.write_uint64(3, self.latest_sequence_number)?;
        }
        if self.account_balance != 0 {
            os.write_uint64(4, self.account_balance)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddTransactionWithValidationRequest {
        AddTransactionWithValidationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::SignedTransaction>>(
                    "signed_txn",
                    |m: &AddTransactionWithValidationRequest| { &m.signed_txn },
                    |m: &mut AddTransactionWithValidationRequest| { &mut m.signed_txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_gas_cost",
                    |m: &AddTransactionWithValidationRequest| { &m.max_gas_cost },
                    |m: &mut AddTransactionWithValidationRequest| { &mut m.max_gas_cost },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "latest_sequence_number",
                    |m: &AddTransactionWithValidationRequest| { &m.latest_sequence_number },
                    |m: &mut AddTransactionWithValidationRequest| { &mut m.latest_sequence_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "account_balance",
                    |m: &AddTransactionWithValidationRequest| { &m.account_balance },
                    |m: &mut AddTransactionWithValidationRequest| { &mut m.account_balance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddTransactionWithValidationRequest>(
                    "AddTransactionWithValidationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddTransactionWithValidationRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddTransactionWithValidationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddTransactionWithValidationRequest,
        };
        unsafe {
            instance.get(AddTransactionWithValidationRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddTransactionWithValidationRequest {
    fn clear(&mut self) {
        self.signed_txn.clear();
        self.max_gas_cost = 0;
        self.latest_sequence_number = 0;
        self.account_balance = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddTransactionWithValidationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddTransactionWithValidationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddTransactionWithValidationResponse {
    // message fields
    pub current_version: u64,
    pub status: ::protobuf::SingularPtrField<super::mempool_status::MempoolAddTransactionStatus>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddTransactionWithValidationResponse {
    fn default() -> &'a AddTransactionWithValidationResponse {
        <AddTransactionWithValidationResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddTransactionWithValidationResponse {
    pub fn new() -> AddTransactionWithValidationResponse {
        ::std::default::Default::default()
    }

    // uint64 current_version = 1;


    pub fn get_current_version(&self) -> u64 {
        self.current_version
    }
    pub fn clear_current_version(&mut self) {
        self.current_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_version(&mut self, v: u64) {
        self.current_version = v;
    }

    // .mempool.MempoolAddTransactionStatus status = 2;


    pub fn get_status(&self) -> &super::mempool_status::MempoolAddTransactionStatus {
        self.status.as_ref().unwrap_or_else(|| super::mempool_status::MempoolAddTransactionStatus::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::mempool_status::MempoolAddTransactionStatus) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::mempool_status::MempoolAddTransactionStatus {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::mempool_status::MempoolAddTransactionStatus {
        self.status.take().unwrap_or_else(|| super::mempool_status::MempoolAddTransactionStatus::new())
    }
}

impl ::protobuf::Message for AddTransactionWithValidationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current_version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.current_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.current_version != 0 {
            os.write_uint64(1, self.current_version)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddTransactionWithValidationResponse {
        AddTransactionWithValidationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "current_version",
                    |m: &AddTransactionWithValidationResponse| { &m.current_version },
                    |m: &mut AddTransactionWithValidationResponse| { &mut m.current_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::mempool_status::MempoolAddTransactionStatus>>(
                    "status",
                    |m: &AddTransactionWithValidationResponse| { &m.status },
                    |m: &mut AddTransactionWithValidationResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddTransactionWithValidationResponse>(
                    "AddTransactionWithValidationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddTransactionWithValidationResponse {
        static mut instance: ::protobuf::lazy::Lazy<AddTransactionWithValidationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddTransactionWithValidationResponse,
        };
        unsafe {
            instance.get(AddTransactionWithValidationResponse::new)
        }
    }
}

impl ::protobuf::Clear for AddTransactionWithValidationResponse {
    fn clear(&mut self) {
        self.current_version = 0;
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddTransactionWithValidationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddTransactionWithValidationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBlockRequest {
    // message fields
    pub max_block_size: u64,
    pub transactions: ::protobuf::RepeatedField<TransactionExclusion>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBlockRequest {
    fn default() -> &'a GetBlockRequest {
        <GetBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockRequest {
    pub fn new() -> GetBlockRequest {
        ::std::default::Default::default()
    }

    // uint64 max_block_size = 1;


    pub fn get_max_block_size(&self) -> u64 {
        self.max_block_size
    }
    pub fn clear_max_block_size(&mut self) {
        self.max_block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_block_size(&mut self, v: u64) {
        self.max_block_size = v;
    }

    // repeated .mempool.TransactionExclusion transactions = 2;


    pub fn get_transactions(&self) -> &[TransactionExclusion] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<TransactionExclusion>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<TransactionExclusion> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<TransactionExclusion> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetBlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_block_size = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_block_size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.max_block_size != 0 {
            os.write_uint64(1, self.max_block_size)?;
        }
        for v in &self.transactions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBlockRequest {
        GetBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_block_size",
                    |m: &GetBlockRequest| { &m.max_block_size },
                    |m: &mut GetBlockRequest| { &mut m.max_block_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionExclusion>>(
                    "transactions",
                    |m: &GetBlockRequest| { &m.transactions },
                    |m: &mut GetBlockRequest| { &mut m.transactions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetBlockRequest>(
                    "GetBlockRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetBlockRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetBlockRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetBlockRequest,
        };
        unsafe {
            instance.get(GetBlockRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetBlockRequest {
    fn clear(&mut self) {
        self.max_block_size = 0;
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBlockResponse {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::transaction::SignedTransactionsBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBlockResponse {
    fn default() -> &'a GetBlockResponse {
        <GetBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockResponse {
    pub fn new() -> GetBlockResponse {
        ::std::default::Default::default()
    }

    // .types.SignedTransactionsBlock block = 1;


    pub fn get_block(&self) -> &super::transaction::SignedTransactionsBlock {
        self.block.as_ref().unwrap_or_else(|| super::transaction::SignedTransactionsBlock::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::transaction::SignedTransactionsBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::transaction::SignedTransactionsBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::transaction::SignedTransactionsBlock {
        self.block.take().unwrap_or_else(|| super::transaction::SignedTransactionsBlock::new())
    }
}

impl ::protobuf::Message for GetBlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBlockResponse {
        GetBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::SignedTransactionsBlock>>(
                    "block",
                    |m: &GetBlockResponse| { &m.block },
                    |m: &mut GetBlockResponse| { &mut m.block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetBlockResponse>(
                    "GetBlockResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetBlockResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetBlockResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetBlockResponse,
        };
        unsafe {
            instance.get(GetBlockResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetBlockResponse {
    fn clear(&mut self) {
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionExclusion {
    // message fields
    pub sender: ::std::vec::Vec<u8>,
    pub sequence_number: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionExclusion {
    fn default() -> &'a TransactionExclusion {
        <TransactionExclusion as ::protobuf::Message>::default_instance()
    }
}

impl TransactionExclusion {
    pub fn new() -> TransactionExclusion {
        ::std::default::Default::default()
    }

    // bytes sender = 1;


    pub fn get_sender(&self) -> &[u8] {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender, ::std::vec::Vec::new())
    }

    // uint64 sequence_number = 2;


    pub fn get_sequence_number(&self) -> u64 {
        self.sequence_number
    }
    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u64) {
        self.sequence_number = v;
    }
}

impl ::protobuf::Message for TransactionExclusion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence_number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if self.sequence_number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence_number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if self.sequence_number != 0 {
            os.write_uint64(2, self.sequence_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionExclusion {
        TransactionExclusion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender",
                    |m: &TransactionExclusion| { &m.sender },
                    |m: &mut TransactionExclusion| { &mut m.sender },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sequence_number",
                    |m: &TransactionExclusion| { &m.sequence_number },
                    |m: &mut TransactionExclusion| { &mut m.sequence_number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionExclusion>(
                    "TransactionExclusion",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionExclusion {
        static mut instance: ::protobuf::lazy::Lazy<TransactionExclusion> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionExclusion,
        };
        unsafe {
            instance.get(TransactionExclusion::new)
        }
    }
}

impl ::protobuf::Clear for TransactionExclusion {
    fn clear(&mut self) {
        self.sender.clear();
        self.sequence_number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionExclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionExclusion {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitTransactionsRequest {
    // message fields
    pub transactions: ::protobuf::RepeatedField<CommittedTransaction>,
    pub block_timestamp_usecs: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitTransactionsRequest {
    fn default() -> &'a CommitTransactionsRequest {
        <CommitTransactionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl CommitTransactionsRequest {
    pub fn new() -> CommitTransactionsRequest {
        ::std::default::Default::default()
    }

    // repeated .mempool.CommittedTransaction transactions = 1;


    pub fn get_transactions(&self) -> &[CommittedTransaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<CommittedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<CommittedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<CommittedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // uint64 block_timestamp_usecs = 2;


    pub fn get_block_timestamp_usecs(&self) -> u64 {
        self.block_timestamp_usecs
    }
    pub fn clear_block_timestamp_usecs(&mut self) {
        self.block_timestamp_usecs = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_timestamp_usecs(&mut self, v: u64) {
        self.block_timestamp_usecs = v;
    }
}

impl ::protobuf::Message for CommitTransactionsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_timestamp_usecs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.block_timestamp_usecs != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_timestamp_usecs, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.block_timestamp_usecs != 0 {
            os.write_uint64(2, self.block_timestamp_usecs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitTransactionsRequest {
        CommitTransactionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommittedTransaction>>(
                    "transactions",
                    |m: &CommitTransactionsRequest| { &m.transactions },
                    |m: &mut CommitTransactionsRequest| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_timestamp_usecs",
                    |m: &CommitTransactionsRequest| { &m.block_timestamp_usecs },
                    |m: &mut CommitTransactionsRequest| { &mut m.block_timestamp_usecs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitTransactionsRequest>(
                    "CommitTransactionsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitTransactionsRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommitTransactionsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitTransactionsRequest,
        };
        unsafe {
            instance.get(CommitTransactionsRequest::new)
        }
    }
}

impl ::protobuf::Clear for CommitTransactionsRequest {
    fn clear(&mut self) {
        self.transactions.clear();
        self.block_timestamp_usecs = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitTransactionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitTransactionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitTransactionsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitTransactionsResponse {
    fn default() -> &'a CommitTransactionsResponse {
        <CommitTransactionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommitTransactionsResponse {
    pub fn new() -> CommitTransactionsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CommitTransactionsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitTransactionsResponse {
        CommitTransactionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CommitTransactionsResponse>(
                    "CommitTransactionsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitTransactionsResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommitTransactionsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitTransactionsResponse,
        };
        unsafe {
            instance.get(CommitTransactionsResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommitTransactionsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitTransactionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitTransactionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommittedTransaction {
    // message fields
    pub sender: ::std::vec::Vec<u8>,
    pub sequence_number: u64,
    pub is_rejected: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommittedTransaction {
    fn default() -> &'a CommittedTransaction {
        <CommittedTransaction as ::protobuf::Message>::default_instance()
    }
}

impl CommittedTransaction {
    pub fn new() -> CommittedTransaction {
        ::std::default::Default::default()
    }

    // bytes sender = 1;


    pub fn get_sender(&self) -> &[u8] {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender, ::std::vec::Vec::new())
    }

    // uint64 sequence_number = 2;


    pub fn get_sequence_number(&self) -> u64 {
        self.sequence_number
    }
    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u64) {
        self.sequence_number = v;
    }

    // bool is_rejected = 3;


    pub fn get_is_rejected(&self) -> bool {
        self.is_rejected
    }
    pub fn clear_is_rejected(&mut self) {
        self.is_rejected = false;
    }

    // Param is passed by value, moved
    pub fn set_is_rejected(&mut self, v: bool) {
        self.is_rejected = v;
    }
}

impl ::protobuf::Message for CommittedTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence_number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_rejected = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if self.sequence_number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_rejected != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if self.sequence_number != 0 {
            os.write_uint64(2, self.sequence_number)?;
        }
        if self.is_rejected != false {
            os.write_bool(3, self.is_rejected)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommittedTransaction {
        CommittedTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender",
                    |m: &CommittedTransaction| { &m.sender },
                    |m: &mut CommittedTransaction| { &mut m.sender },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sequence_number",
                    |m: &CommittedTransaction| { &m.sequence_number },
                    |m: &mut CommittedTransaction| { &mut m.sequence_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_rejected",
                    |m: &CommittedTransaction| { &m.is_rejected },
                    |m: &mut CommittedTransaction| { &mut m.is_rejected },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommittedTransaction>(
                    "CommittedTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommittedTransaction {
        static mut instance: ::protobuf::lazy::Lazy<CommittedTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommittedTransaction,
        };
        unsafe {
            instance.get(CommittedTransaction::new)
        }
    }
}

impl ::protobuf::Clear for CommittedTransaction {
    fn clear(&mut self) {
        self.sender.clear();
        self.sequence_number = 0;
        self.is_rejected = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommittedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommittedTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheckRequest>(
                    "HealthCheckRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheckRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheckRequest,
        };
        unsafe {
            instance.get(HealthCheckRequest::new)
        }
    }
}

impl ::protobuf::Clear for HealthCheckRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckResponse {
    // message fields
    pub is_healthy: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    // bool is_healthy = 1;


    pub fn get_is_healthy(&self) -> bool {
        self.is_healthy
    }
    pub fn clear_is_healthy(&mut self) {
        self.is_healthy = false;
    }

    // Param is passed by value, moved
    pub fn set_is_healthy(&mut self, v: bool) {
        self.is_healthy = v;
    }
}

impl ::protobuf::Message for HealthCheckResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_healthy = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_healthy != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.is_healthy != false {
            os.write_bool(1, self.is_healthy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_healthy",
                    |m: &HealthCheckResponse| { &m.is_healthy },
                    |m: &mut HealthCheckResponse| { &mut m.is_healthy },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HealthCheckResponse>(
                    "HealthCheckResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static mut instance: ::protobuf::lazy::Lazy<HealthCheckResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HealthCheckResponse,
        };
        unsafe {
            instance.get(HealthCheckResponse::new)
        }
    }
}

impl ::protobuf::Clear for HealthCheckResponse {
    fn clear(&mut self) {
        self.is_healthy = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmempool.proto\x12\x07mempool\x1a\x11transaction.proto\x1a\x1bshared/\
    mempool_status.proto\"\xdf\x01\n#AddTransactionWithValidationRequest\x12\
    7\n\nsigned_txn\x18\x01\x20\x01(\x0b2\x18.types.SignedTransactionR\tsign\
    edTxn\x12\x20\n\x0cmax_gas_cost\x18\x02\x20\x01(\x04R\nmaxGasCost\x124\n\
    \x16latest_sequence_number\x18\x03\x20\x01(\x04R\x14latestSequenceNumber\
    \x12'\n\x0faccount_balance\x18\x04\x20\x01(\x04R\x0eaccountBalance\"\x8d\
    \x01\n$AddTransactionWithValidationResponse\x12'\n\x0fcurrent_version\
    \x18\x01\x20\x01(\x04R\x0ecurrentVersion\x12<\n\x06status\x18\x02\x20\
    \x01(\x0b2$.mempool.MempoolAddTransactionStatusR\x06status\"z\n\x0fGetBl\
    ockRequest\x12$\n\x0emax_block_size\x18\x01\x20\x01(\x04R\x0cmaxBlockSiz\
    e\x12A\n\x0ctransactions\x18\x02\x20\x03(\x0b2\x1d.mempool.TransactionEx\
    clusionR\x0ctransactions\"H\n\x10GetBlockResponse\x124\n\x05block\x18\
    \x01\x20\x01(\x0b2\x1e.types.SignedTransactionsBlockR\x05block\"W\n\x14T\
    ransactionExclusion\x12\x16\n\x06sender\x18\x01\x20\x01(\x0cR\x06sender\
    \x12'\n\x0fsequence_number\x18\x02\x20\x01(\x04R\x0esequenceNumber\"\x92\
    \x01\n\x19CommitTransactionsRequest\x12A\n\x0ctransactions\x18\x01\x20\
    \x03(\x0b2\x1d.mempool.CommittedTransactionR\x0ctransactions\x122\n\x15b\
    lock_timestamp_usecs\x18\x02\x20\x01(\x04R\x13blockTimestampUsecs\"\x1c\
    \n\x1aCommitTransactionsResponse\"x\n\x14CommittedTransaction\x12\x16\n\
    \x06sender\x18\x01\x20\x01(\x0cR\x06sender\x12'\n\x0fsequence_number\x18\
    \x02\x20\x01(\x04R\x0esequenceNumber\x12\x1f\n\x0bis_rejected\x18\x03\
    \x20\x01(\x08R\nisRejected\"\x14\n\x12HealthCheckRequest\"4\n\x13HealthC\
    heckResponse\x12\x1d\n\nis_healthy\x18\x01\x20\x01(\x08R\tisHealthy2\xf8\
    \x02\n\x07Mempool\x12}\n\x1cAddTransactionWithValidation\x12,.mempool.Ad\
    dTransactionWithValidationRequest\x1a-.mempool.AddTransactionWithValidat\
    ionResponse\"\0\x12A\n\x08GetBlock\x12\x18.mempool.GetBlockRequest\x1a\
    \x19.mempool.GetBlockResponse\"\0\x12_\n\x12CommitTransactions\x12\".mem\
    pool.CommitTransactionsRequest\x1a#.mempool.CommitTransactionsResponse\"\
    \0\x12J\n\x0bHealthCheck\x12\x1b.mempool.HealthCheckRequest\x1a\x1c.memp\
    ool.HealthCheckResponse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
