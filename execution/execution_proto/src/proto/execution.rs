// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `execution.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteBlockRequest {
    // message fields
    pub transactions: ::protobuf::RepeatedField<super::transaction::SignedTransaction>,
    pub parent_block_id: ::std::vec::Vec<u8>,
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteBlockRequest {
    fn default() -> &'a ExecuteBlockRequest {
        <ExecuteBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteBlockRequest {
    pub fn new() -> ExecuteBlockRequest {
        ::std::default::Default::default()
    }

    // repeated .types.SignedTransaction transactions = 1;


    pub fn get_transactions(&self) -> &[super::transaction::SignedTransaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::transaction::SignedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::transaction::SignedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::transaction::SignedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // bytes parent_block_id = 2;


    pub fn get_parent_block_id(&self) -> &[u8] {
        &self.parent_block_id
    }
    pub fn clear_parent_block_id(&mut self) {
        self.parent_block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_block_id
    }

    // Take field
    pub fn take_parent_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_block_id, ::std::vec::Vec::new())
    }

    // bytes block_id = 3;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ExecuteBlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_block_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.parent_block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.parent_block_id);
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.parent_block_id.is_empty() {
            os.write_bytes(2, &self.parent_block_id)?;
        }
        if !self.block_id.is_empty() {
            os.write_bytes(3, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteBlockRequest {
        ExecuteBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::SignedTransaction>>(
                    "transactions",
                    |m: &ExecuteBlockRequest| { &m.transactions },
                    |m: &mut ExecuteBlockRequest| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_block_id",
                    |m: &ExecuteBlockRequest| { &m.parent_block_id },
                    |m: &mut ExecuteBlockRequest| { &mut m.parent_block_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_id",
                    |m: &ExecuteBlockRequest| { &m.block_id },
                    |m: &mut ExecuteBlockRequest| { &mut m.block_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExecuteBlockRequest>(
                    "ExecuteBlockRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecuteBlockRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExecuteBlockRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExecuteBlockRequest,
        };
        unsafe {
            instance.get(ExecuteBlockRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExecuteBlockRequest {
    fn clear(&mut self) {
        self.transactions.clear();
        self.parent_block_id.clear();
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteBlockResponse {
    // message fields
    pub root_hash: ::std::vec::Vec<u8>,
    pub status: ::protobuf::RepeatedField<super::vm_errors::VMStatus>,
    pub version: u64,
    pub validators: ::protobuf::SingularPtrField<super::validator_set::ValidatorSet>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteBlockResponse {
    fn default() -> &'a ExecuteBlockResponse {
        <ExecuteBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteBlockResponse {
    pub fn new() -> ExecuteBlockResponse {
        ::std::default::Default::default()
    }

    // bytes root_hash = 1;


    pub fn get_root_hash(&self) -> &[u8] {
        &self.root_hash
    }
    pub fn clear_root_hash(&mut self) {
        self.root_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_hash
    }

    // Take field
    pub fn take_root_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_hash, ::std::vec::Vec::new())
    }

    // repeated .types.VMStatus status = 2;


    pub fn get_status(&self) -> &[super::vm_errors::VMStatus] {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::protobuf::RepeatedField<super::vm_errors::VMStatus>) {
        self.status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_status(&mut self) -> &mut ::protobuf::RepeatedField<super::vm_errors::VMStatus> {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::protobuf::RepeatedField<super::vm_errors::VMStatus> {
        ::std::mem::replace(&mut self.status, ::protobuf::RepeatedField::new())
    }

    // uint64 version = 3;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }

    // .types.ValidatorSet validators = 4;


    pub fn get_validators(&self) -> &super::validator_set::ValidatorSet {
        self.validators.as_ref().unwrap_or_else(|| super::validator_set::ValidatorSet::default_instance())
    }
    pub fn clear_validators(&mut self) {
        self.validators.clear();
    }

    pub fn has_validators(&self) -> bool {
        self.validators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validators(&mut self, v: super::validator_set::ValidatorSet) {
        self.validators = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validators(&mut self) -> &mut super::validator_set::ValidatorSet {
        if self.validators.is_none() {
            self.validators.set_default();
        }
        self.validators.as_mut().unwrap()
    }

    // Take field
    pub fn take_validators(&mut self) -> super::validator_set::ValidatorSet {
        self.validators.take().unwrap_or_else(|| super::validator_set::ValidatorSet::new())
    }
}

impl ::protobuf::Message for ExecuteBlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validators {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.status)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.root_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.root_hash);
        }
        for value in &self.status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.root_hash.is_empty() {
            os.write_bytes(1, &self.root_hash)?;
        }
        for v in &self.status {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.version != 0 {
            os.write_uint64(3, self.version)?;
        }
        if let Some(ref v) = self.validators.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteBlockResponse {
        ExecuteBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "root_hash",
                    |m: &ExecuteBlockResponse| { &m.root_hash },
                    |m: &mut ExecuteBlockResponse| { &mut m.root_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::vm_errors::VMStatus>>(
                    "status",
                    |m: &ExecuteBlockResponse| { &m.status },
                    |m: &mut ExecuteBlockResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "version",
                    |m: &ExecuteBlockResponse| { &m.version },
                    |m: &mut ExecuteBlockResponse| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::validator_set::ValidatorSet>>(
                    "validators",
                    |m: &ExecuteBlockResponse| { &m.validators },
                    |m: &mut ExecuteBlockResponse| { &mut m.validators },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExecuteBlockResponse>(
                    "ExecuteBlockResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecuteBlockResponse {
        static mut instance: ::protobuf::lazy::Lazy<ExecuteBlockResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExecuteBlockResponse,
        };
        unsafe {
            instance.get(ExecuteBlockResponse::new)
        }
    }
}

impl ::protobuf::Clear for ExecuteBlockResponse {
    fn clear(&mut self) {
        self.root_hash.clear();
        self.status.clear();
        self.version = 0;
        self.validators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitBlockRequest {
    // message fields
    pub ledger_info_with_sigs: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfoWithSignatures>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitBlockRequest {
    fn default() -> &'a CommitBlockRequest {
        <CommitBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl CommitBlockRequest {
    pub fn new() -> CommitBlockRequest {
        ::std::default::Default::default()
    }

    // .types.LedgerInfoWithSignatures ledger_info_with_sigs = 1;


    pub fn get_ledger_info_with_sigs(&self) -> &super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::default_instance())
    }
    pub fn clear_ledger_info_with_sigs(&mut self) {
        self.ledger_info_with_sigs.clear();
    }

    pub fn has_ledger_info_with_sigs(&self) -> bool {
        self.ledger_info_with_sigs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_with_sigs(&mut self, v: super::ledger_info::LedgerInfoWithSignatures) {
        self.ledger_info_with_sigs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_with_sigs(&mut self) -> &mut super::ledger_info::LedgerInfoWithSignatures {
        if self.ledger_info_with_sigs.is_none() {
            self.ledger_info_with_sigs.set_default();
        }
        self.ledger_info_with_sigs.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_with_sigs(&mut self) -> super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.take().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::new())
    }
}

impl ::protobuf::Message for CommitBlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_with_sigs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_with_sigs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitBlockRequest {
        CommitBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfoWithSignatures>>(
                    "ledger_info_with_sigs",
                    |m: &CommitBlockRequest| { &m.ledger_info_with_sigs },
                    |m: &mut CommitBlockRequest| { &mut m.ledger_info_with_sigs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitBlockRequest>(
                    "CommitBlockRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitBlockRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommitBlockRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitBlockRequest,
        };
        unsafe {
            instance.get(CommitBlockRequest::new)
        }
    }
}

impl ::protobuf::Clear for CommitBlockRequest {
    fn clear(&mut self) {
        self.ledger_info_with_sigs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitBlockResponse {
    // message fields
    pub status: CommitBlockStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitBlockResponse {
    fn default() -> &'a CommitBlockResponse {
        <CommitBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommitBlockResponse {
    pub fn new() -> CommitBlockResponse {
        ::std::default::Default::default()
    }

    // .execution.CommitBlockStatus status = 1;


    pub fn get_status(&self) -> CommitBlockStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = CommitBlockStatus::SUCCEEDED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CommitBlockStatus) {
        self.status = v;
    }
}

impl ::protobuf::Message for CommitBlockResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != CommitBlockStatus::SUCCEEDED {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != CommitBlockStatus::SUCCEEDED {
            os.write_enum(1, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitBlockResponse {
        CommitBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommitBlockStatus>>(
                    "status",
                    |m: &CommitBlockResponse| { &m.status },
                    |m: &mut CommitBlockResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitBlockResponse>(
                    "CommitBlockResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitBlockResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommitBlockResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitBlockResponse,
        };
        unsafe {
            instance.get(CommitBlockResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommitBlockResponse {
    fn clear(&mut self) {
        self.status = CommitBlockStatus::SUCCEEDED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteChunkRequest {
    // message fields
    pub txn_list_with_proof: ::protobuf::SingularPtrField<super::transaction::TransactionListWithProof>,
    pub ledger_info_with_sigs: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfoWithSignatures>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteChunkRequest {
    fn default() -> &'a ExecuteChunkRequest {
        <ExecuteChunkRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteChunkRequest {
    pub fn new() -> ExecuteChunkRequest {
        ::std::default::Default::default()
    }

    // .types.TransactionListWithProof txn_list_with_proof = 1;


    pub fn get_txn_list_with_proof(&self) -> &super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.as_ref().unwrap_or_else(|| super::transaction::TransactionListWithProof::default_instance())
    }
    pub fn clear_txn_list_with_proof(&mut self) {
        self.txn_list_with_proof.clear();
    }

    pub fn has_txn_list_with_proof(&self) -> bool {
        self.txn_list_with_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn_list_with_proof(&mut self, v: super::transaction::TransactionListWithProof) {
        self.txn_list_with_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_list_with_proof(&mut self) -> &mut super::transaction::TransactionListWithProof {
        if self.txn_list_with_proof.is_none() {
            self.txn_list_with_proof.set_default();
        }
        self.txn_list_with_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn_list_with_proof(&mut self) -> super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.take().unwrap_or_else(|| super::transaction::TransactionListWithProof::new())
    }

    // .types.LedgerInfoWithSignatures ledger_info_with_sigs = 2;


    pub fn get_ledger_info_with_sigs(&self) -> &super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::default_instance())
    }
    pub fn clear_ledger_info_with_sigs(&mut self) {
        self.ledger_info_with_sigs.clear();
    }

    pub fn has_ledger_info_with_sigs(&self) -> bool {
        self.ledger_info_with_sigs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_with_sigs(&mut self, v: super::ledger_info::LedgerInfoWithSignatures) {
        self.ledger_info_with_sigs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_with_sigs(&mut self) -> &mut super::ledger_info::LedgerInfoWithSignatures {
        if self.ledger_info_with_sigs.is_none() {
            self.ledger_info_with_sigs.set_default();
        }
        self.ledger_info_with_sigs.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_with_sigs(&mut self) -> super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.take().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::new())
    }
}

impl ::protobuf::Message for ExecuteChunkRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.txn_list_with_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ledger_info_with_sigs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.txn_list_with_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_with_sigs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteChunkRequest {
        ExecuteChunkRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionListWithProof>>(
                    "txn_list_with_proof",
                    |m: &ExecuteChunkRequest| { &m.txn_list_with_proof },
                    |m: &mut ExecuteChunkRequest| { &mut m.txn_list_with_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfoWithSignatures>>(
                    "ledger_info_with_sigs",
                    |m: &ExecuteChunkRequest| { &m.ledger_info_with_sigs },
                    |m: &mut ExecuteChunkRequest| { &mut m.ledger_info_with_sigs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExecuteChunkRequest>(
                    "ExecuteChunkRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecuteChunkRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExecuteChunkRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExecuteChunkRequest,
        };
        unsafe {
            instance.get(ExecuteChunkRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExecuteChunkRequest {
    fn clear(&mut self) {
        self.txn_list_with_proof.clear();
        self.ledger_info_with_sigs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteChunkRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteChunkRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteChunkResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteChunkResponse {
    fn default() -> &'a ExecuteChunkResponse {
        <ExecuteChunkResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteChunkResponse {
    pub fn new() -> ExecuteChunkResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ExecuteChunkResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteChunkResponse {
        ExecuteChunkResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ExecuteChunkResponse>(
                    "ExecuteChunkResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecuteChunkResponse {
        static mut instance: ::protobuf::lazy::Lazy<ExecuteChunkResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExecuteChunkResponse,
        };
        unsafe {
            instance.get(ExecuteChunkResponse::new)
        }
    }
}

impl ::protobuf::Clear for ExecuteChunkResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteChunkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteChunkResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CommitBlockStatus {
    SUCCEEDED = 0,
    FAILED = 1,
}

impl ::protobuf::ProtobufEnum for CommitBlockStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommitBlockStatus> {
        match value {
            0 => ::std::option::Option::Some(CommitBlockStatus::SUCCEEDED),
            1 => ::std::option::Option::Some(CommitBlockStatus::FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommitBlockStatus] = &[
            CommitBlockStatus::SUCCEEDED,
            CommitBlockStatus::FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CommitBlockStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CommitBlockStatus {
}

impl ::std::default::Default for CommitBlockStatus {
    fn default() -> Self {
        CommitBlockStatus::SUCCEEDED
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitBlockStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fexecution.proto\x12\texecution\x1a\x14get_with_proof.proto\x1a\x11\
    ledger_info.proto\x1a\x11transaction.proto\x1a\x13validator_set.proto\
    \x1a\x0fvm_errors.proto\"\x96\x01\n\x13ExecuteBlockRequest\x12<\n\x0ctra\
    nsactions\x18\x01\x20\x03(\x0b2\x18.types.SignedTransactionR\x0ctransact\
    ions\x12&\n\x0fparent_block_id\x18\x02\x20\x01(\x0cR\rparentBlockId\x12\
    \x19\n\x08block_id\x18\x03\x20\x01(\x0cR\x07blockId\"\xab\x01\n\x14Execu\
    teBlockResponse\x12\x1b\n\troot_hash\x18\x01\x20\x01(\x0cR\x08rootHash\
    \x12'\n\x06status\x18\x02\x20\x03(\x0b2\x0f.types.VMStatusR\x06status\
    \x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\x123\n\nvalidator\
    s\x18\x04\x20\x01(\x0b2\x13.types.ValidatorSetR\nvalidators\"h\n\x12Comm\
    itBlockRequest\x12R\n\x15ledger_info_with_sigs\x18\x01\x20\x01(\x0b2\x1f\
    .types.LedgerInfoWithSignaturesR\x12ledgerInfoWithSigs\"K\n\x13CommitBlo\
    ckResponse\x124\n\x06status\x18\x01\x20\x01(\x0e2\x1c.execution.CommitBl\
    ockStatusR\x06status\"\xb9\x01\n\x13ExecuteChunkRequest\x12N\n\x13txn_li\
    st_with_proof\x18\x01\x20\x01(\x0b2\x1f.types.TransactionListWithProofR\
    \x10txnListWithProof\x12R\n\x15ledger_info_with_sigs\x18\x02\x20\x01(\
    \x0b2\x1f.types.LedgerInfoWithSignaturesR\x12ledgerInfoWithSigs\"\x16\n\
    \x14ExecuteChunkResponse*.\n\x11CommitBlockStatus\x12\r\n\tSUCCEEDED\x10\
    \0\x12\n\n\x06FAILED\x10\x012\x81\x02\n\tExecution\x12Q\n\x0cExecuteBloc\
    k\x12\x1e.execution.ExecuteBlockRequest\x1a\x1f.execution.ExecuteBlockRe\
    sponse\"\0\x12N\n\x0bCommitBlock\x12\x1d.execution.CommitBlockRequest\
    \x1a\x1e.execution.CommitBlockResponse\"\0\x12Q\n\x0cExecuteChunk\x12\
    \x1e.execution.ExecuteChunkRequest\x1a\x1f.execution.ExecuteChunkRespons\
    e\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
