// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `storage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct SaveTransactionsRequest {
    // message fields
    pub txns_to_commit: ::protobuf::RepeatedField<super::transaction::TransactionToCommit>,
    pub first_version: u64,
    pub ledger_info_with_signatures: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfoWithSignatures>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SaveTransactionsRequest {
    fn default() -> &'a SaveTransactionsRequest {
        <SaveTransactionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveTransactionsRequest {
    pub fn new() -> SaveTransactionsRequest {
        ::std::default::Default::default()
    }

    // repeated .types.TransactionToCommit txns_to_commit = 1;


    pub fn get_txns_to_commit(&self) -> &[super::transaction::TransactionToCommit] {
        &self.txns_to_commit
    }
    pub fn clear_txns_to_commit(&mut self) {
        self.txns_to_commit.clear();
    }

    // Param is passed by value, moved
    pub fn set_txns_to_commit(&mut self, v: ::protobuf::RepeatedField<super::transaction::TransactionToCommit>) {
        self.txns_to_commit = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txns_to_commit(&mut self) -> &mut ::protobuf::RepeatedField<super::transaction::TransactionToCommit> {
        &mut self.txns_to_commit
    }

    // Take field
    pub fn take_txns_to_commit(&mut self) -> ::protobuf::RepeatedField<super::transaction::TransactionToCommit> {
        ::std::mem::replace(&mut self.txns_to_commit, ::protobuf::RepeatedField::new())
    }

    // uint64 first_version = 2;


    pub fn get_first_version(&self) -> u64 {
        self.first_version
    }
    pub fn clear_first_version(&mut self) {
        self.first_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_version(&mut self, v: u64) {
        self.first_version = v;
    }

    // .types.LedgerInfoWithSignatures ledger_info_with_signatures = 3;


    pub fn get_ledger_info_with_signatures(&self) -> &super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_signatures.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::default_instance())
    }
    pub fn clear_ledger_info_with_signatures(&mut self) {
        self.ledger_info_with_signatures.clear();
    }

    pub fn has_ledger_info_with_signatures(&self) -> bool {
        self.ledger_info_with_signatures.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_with_signatures(&mut self, v: super::ledger_info::LedgerInfoWithSignatures) {
        self.ledger_info_with_signatures = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_with_signatures(&mut self) -> &mut super::ledger_info::LedgerInfoWithSignatures {
        if self.ledger_info_with_signatures.is_none() {
            self.ledger_info_with_signatures.set_default();
        }
        self.ledger_info_with_signatures.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_with_signatures(&mut self) -> super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_signatures.take().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::new())
    }
}

impl ::protobuf::Message for SaveTransactionsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.txns_to_commit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ledger_info_with_signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.txns_to_commit)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.first_version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_with_signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.txns_to_commit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.first_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.first_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ledger_info_with_signatures.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.txns_to_commit {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.first_version != 0 {
            os.write_uint64(2, self.first_version)?;
        }
        if let Some(ref v) = self.ledger_info_with_signatures.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SaveTransactionsRequest {
        SaveTransactionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionToCommit>>(
                    "txns_to_commit",
                    |m: &SaveTransactionsRequest| { &m.txns_to_commit },
                    |m: &mut SaveTransactionsRequest| { &mut m.txns_to_commit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "first_version",
                    |m: &SaveTransactionsRequest| { &m.first_version },
                    |m: &mut SaveTransactionsRequest| { &mut m.first_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfoWithSignatures>>(
                    "ledger_info_with_signatures",
                    |m: &SaveTransactionsRequest| { &m.ledger_info_with_signatures },
                    |m: &mut SaveTransactionsRequest| { &mut m.ledger_info_with_signatures },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SaveTransactionsRequest>(
                    "SaveTransactionsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SaveTransactionsRequest {
        static mut instance: ::protobuf::lazy::Lazy<SaveTransactionsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SaveTransactionsRequest,
        };
        unsafe {
            instance.get(SaveTransactionsRequest::new)
        }
    }
}

impl ::protobuf::Clear for SaveTransactionsRequest {
    fn clear(&mut self) {
        self.txns_to_commit.clear();
        self.first_version = 0;
        self.ledger_info_with_signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaveTransactionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveTransactionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SaveTransactionsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SaveTransactionsResponse {
    fn default() -> &'a SaveTransactionsResponse {
        <SaveTransactionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveTransactionsResponse {
    pub fn new() -> SaveTransactionsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SaveTransactionsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SaveTransactionsResponse {
        SaveTransactionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SaveTransactionsResponse>(
                    "SaveTransactionsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SaveTransactionsResponse {
        static mut instance: ::protobuf::lazy::Lazy<SaveTransactionsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SaveTransactionsResponse,
        };
        unsafe {
            instance.get(SaveTransactionsResponse::new)
        }
    }
}

impl ::protobuf::Clear for SaveTransactionsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaveTransactionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveTransactionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTransactionsRequest {
    // message fields
    pub start_version: u64,
    pub batch_size: u64,
    pub ledger_version: u64,
    pub fetch_events: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTransactionsRequest {
    fn default() -> &'a GetTransactionsRequest {
        <GetTransactionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTransactionsRequest {
    pub fn new() -> GetTransactionsRequest {
        ::std::default::Default::default()
    }

    // uint64 start_version = 1;


    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }
    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    // uint64 batch_size = 2;


    pub fn get_batch_size(&self) -> u64 {
        self.batch_size
    }
    pub fn clear_batch_size(&mut self) {
        self.batch_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_size(&mut self, v: u64) {
        self.batch_size = v;
    }

    // uint64 ledger_version = 3;


    pub fn get_ledger_version(&self) -> u64 {
        self.ledger_version
    }
    pub fn clear_ledger_version(&mut self) {
        self.ledger_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_ledger_version(&mut self, v: u64) {
        self.ledger_version = v;
    }

    // bool fetch_events = 4;


    pub fn get_fetch_events(&self) -> bool {
        self.fetch_events
    }
    pub fn clear_fetch_events(&mut self) {
        self.fetch_events = false;
    }

    // Param is passed by value, moved
    pub fn set_fetch_events(&mut self, v: bool) {
        self.fetch_events = v;
    }
}

impl ::protobuf::Message for GetTransactionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ledger_version = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fetch_events = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.batch_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.batch_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ledger_version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ledger_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fetch_events != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.start_version != 0 {
            os.write_uint64(1, self.start_version)?;
        }
        if self.batch_size != 0 {
            os.write_uint64(2, self.batch_size)?;
        }
        if self.ledger_version != 0 {
            os.write_uint64(3, self.ledger_version)?;
        }
        if self.fetch_events != false {
            os.write_bool(4, self.fetch_events)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTransactionsRequest {
        GetTransactionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "start_version",
                    |m: &GetTransactionsRequest| { &m.start_version },
                    |m: &mut GetTransactionsRequest| { &mut m.start_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "batch_size",
                    |m: &GetTransactionsRequest| { &m.batch_size },
                    |m: &mut GetTransactionsRequest| { &mut m.batch_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "ledger_version",
                    |m: &GetTransactionsRequest| { &m.ledger_version },
                    |m: &mut GetTransactionsRequest| { &mut m.ledger_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fetch_events",
                    |m: &GetTransactionsRequest| { &m.fetch_events },
                    |m: &mut GetTransactionsRequest| { &mut m.fetch_events },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTransactionsRequest>(
                    "GetTransactionsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTransactionsRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetTransactionsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTransactionsRequest,
        };
        unsafe {
            instance.get(GetTransactionsRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetTransactionsRequest {
    fn clear(&mut self) {
        self.start_version = 0;
        self.batch_size = 0;
        self.ledger_version = 0;
        self.fetch_events = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTransactionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransactionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTransactionsResponse {
    // message fields
    pub txn_list_with_proof: ::protobuf::SingularPtrField<super::transaction::TransactionListWithProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTransactionsResponse {
    fn default() -> &'a GetTransactionsResponse {
        <GetTransactionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTransactionsResponse {
    pub fn new() -> GetTransactionsResponse {
        ::std::default::Default::default()
    }

    // .types.TransactionListWithProof txn_list_with_proof = 1;


    pub fn get_txn_list_with_proof(&self) -> &super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.as_ref().unwrap_or_else(|| super::transaction::TransactionListWithProof::default_instance())
    }
    pub fn clear_txn_list_with_proof(&mut self) {
        self.txn_list_with_proof.clear();
    }

    pub fn has_txn_list_with_proof(&self) -> bool {
        self.txn_list_with_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn_list_with_proof(&mut self, v: super::transaction::TransactionListWithProof) {
        self.txn_list_with_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_list_with_proof(&mut self) -> &mut super::transaction::TransactionListWithProof {
        if self.txn_list_with_proof.is_none() {
            self.txn_list_with_proof.set_default();
        }
        self.txn_list_with_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn_list_with_proof(&mut self) -> super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.take().unwrap_or_else(|| super::transaction::TransactionListWithProof::new())
    }
}

impl ::protobuf::Message for GetTransactionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.txn_list_with_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.txn_list_with_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTransactionsResponse {
        GetTransactionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionListWithProof>>(
                    "txn_list_with_proof",
                    |m: &GetTransactionsResponse| { &m.txn_list_with_proof },
                    |m: &mut GetTransactionsResponse| { &mut m.txn_list_with_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTransactionsResponse>(
                    "GetTransactionsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTransactionsResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetTransactionsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTransactionsResponse,
        };
        unsafe {
            instance.get(GetTransactionsResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetTransactionsResponse {
    fn clear(&mut self) {
        self.txn_list_with_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTransactionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransactionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAccountStateWithProofByStateRootRequest {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub state_root_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAccountStateWithProofByStateRootRequest {
    fn default() -> &'a GetAccountStateWithProofByStateRootRequest {
        <GetAccountStateWithProofByStateRootRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAccountStateWithProofByStateRootRequest {
    pub fn new() -> GetAccountStateWithProofByStateRootRequest {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes state_root_hash = 2;


    pub fn get_state_root_hash(&self) -> &[u8] {
        &self.state_root_hash
    }
    pub fn clear_state_root_hash(&mut self) {
        self.state_root_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_root_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.state_root_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_root_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.state_root_hash
    }

    // Take field
    pub fn take_state_root_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.state_root_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetAccountStateWithProofByStateRootRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.state_root_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.state_root_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.state_root_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.state_root_hash.is_empty() {
            os.write_bytes(2, &self.state_root_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAccountStateWithProofByStateRootRequest {
        GetAccountStateWithProofByStateRootRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &GetAccountStateWithProofByStateRootRequest| { &m.address },
                    |m: &mut GetAccountStateWithProofByStateRootRequest| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "state_root_hash",
                    |m: &GetAccountStateWithProofByStateRootRequest| { &m.state_root_hash },
                    |m: &mut GetAccountStateWithProofByStateRootRequest| { &mut m.state_root_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetAccountStateWithProofByStateRootRequest>(
                    "GetAccountStateWithProofByStateRootRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetAccountStateWithProofByStateRootRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetAccountStateWithProofByStateRootRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetAccountStateWithProofByStateRootRequest,
        };
        unsafe {
            instance.get(GetAccountStateWithProofByStateRootRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetAccountStateWithProofByStateRootRequest {
    fn clear(&mut self) {
        self.address.clear();
        self.state_root_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAccountStateWithProofByStateRootRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAccountStateWithProofByStateRootRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAccountStateWithProofByStateRootResponse {
    // message fields
    pub account_state_blob: ::protobuf::SingularPtrField<super::account_state_blob::AccountStateBlob>,
    pub sparse_merkle_proof: ::protobuf::SingularPtrField<super::proof::SparseMerkleProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAccountStateWithProofByStateRootResponse {
    fn default() -> &'a GetAccountStateWithProofByStateRootResponse {
        <GetAccountStateWithProofByStateRootResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAccountStateWithProofByStateRootResponse {
    pub fn new() -> GetAccountStateWithProofByStateRootResponse {
        ::std::default::Default::default()
    }

    // .types.AccountStateBlob account_state_blob = 1;


    pub fn get_account_state_blob(&self) -> &super::account_state_blob::AccountStateBlob {
        self.account_state_blob.as_ref().unwrap_or_else(|| super::account_state_blob::AccountStateBlob::default_instance())
    }
    pub fn clear_account_state_blob(&mut self) {
        self.account_state_blob.clear();
    }

    pub fn has_account_state_blob(&self) -> bool {
        self.account_state_blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_state_blob(&mut self, v: super::account_state_blob::AccountStateBlob) {
        self.account_state_blob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_state_blob(&mut self) -> &mut super::account_state_blob::AccountStateBlob {
        if self.account_state_blob.is_none() {
            self.account_state_blob.set_default();
        }
        self.account_state_blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_state_blob(&mut self) -> super::account_state_blob::AccountStateBlob {
        self.account_state_blob.take().unwrap_or_else(|| super::account_state_blob::AccountStateBlob::new())
    }

    // .types.SparseMerkleProof sparse_merkle_proof = 2;


    pub fn get_sparse_merkle_proof(&self) -> &super::proof::SparseMerkleProof {
        self.sparse_merkle_proof.as_ref().unwrap_or_else(|| super::proof::SparseMerkleProof::default_instance())
    }
    pub fn clear_sparse_merkle_proof(&mut self) {
        self.sparse_merkle_proof.clear();
    }

    pub fn has_sparse_merkle_proof(&self) -> bool {
        self.sparse_merkle_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sparse_merkle_proof(&mut self, v: super::proof::SparseMerkleProof) {
        self.sparse_merkle_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sparse_merkle_proof(&mut self) -> &mut super::proof::SparseMerkleProof {
        if self.sparse_merkle_proof.is_none() {
            self.sparse_merkle_proof.set_default();
        }
        self.sparse_merkle_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_sparse_merkle_proof(&mut self) -> super::proof::SparseMerkleProof {
        self.sparse_merkle_proof.take().unwrap_or_else(|| super::proof::SparseMerkleProof::new())
    }
}

impl ::protobuf::Message for GetAccountStateWithProofByStateRootResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account_state_blob {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sparse_merkle_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account_state_blob)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sparse_merkle_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account_state_blob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sparse_merkle_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account_state_blob.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sparse_merkle_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAccountStateWithProofByStateRootResponse {
        GetAccountStateWithProofByStateRootResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::account_state_blob::AccountStateBlob>>(
                    "account_state_blob",
                    |m: &GetAccountStateWithProofByStateRootResponse| { &m.account_state_blob },
                    |m: &mut GetAccountStateWithProofByStateRootResponse| { &mut m.account_state_blob },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::SparseMerkleProof>>(
                    "sparse_merkle_proof",
                    |m: &GetAccountStateWithProofByStateRootResponse| { &m.sparse_merkle_proof },
                    |m: &mut GetAccountStateWithProofByStateRootResponse| { &mut m.sparse_merkle_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetAccountStateWithProofByStateRootResponse>(
                    "GetAccountStateWithProofByStateRootResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetAccountStateWithProofByStateRootResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetAccountStateWithProofByStateRootResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetAccountStateWithProofByStateRootResponse,
        };
        unsafe {
            instance.get(GetAccountStateWithProofByStateRootResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetAccountStateWithProofByStateRootResponse {
    fn clear(&mut self) {
        self.account_state_blob.clear();
        self.sparse_merkle_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAccountStateWithProofByStateRootResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAccountStateWithProofByStateRootResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetExecutorStartupInfoRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetExecutorStartupInfoRequest {
    fn default() -> &'a GetExecutorStartupInfoRequest {
        <GetExecutorStartupInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetExecutorStartupInfoRequest {
    pub fn new() -> GetExecutorStartupInfoRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetExecutorStartupInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetExecutorStartupInfoRequest {
        GetExecutorStartupInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetExecutorStartupInfoRequest>(
                    "GetExecutorStartupInfoRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetExecutorStartupInfoRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetExecutorStartupInfoRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetExecutorStartupInfoRequest,
        };
        unsafe {
            instance.get(GetExecutorStartupInfoRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetExecutorStartupInfoRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetExecutorStartupInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExecutorStartupInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetExecutorStartupInfoResponse {
    // message fields
    pub info: ::protobuf::SingularPtrField<ExecutorStartupInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetExecutorStartupInfoResponse {
    fn default() -> &'a GetExecutorStartupInfoResponse {
        <GetExecutorStartupInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetExecutorStartupInfoResponse {
    pub fn new() -> GetExecutorStartupInfoResponse {
        ::std::default::Default::default()
    }

    // .storage.ExecutorStartupInfo info = 1;


    pub fn get_info(&self) -> &ExecutorStartupInfo {
        self.info.as_ref().unwrap_or_else(|| ExecutorStartupInfo::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ExecutorStartupInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ExecutorStartupInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> ExecutorStartupInfo {
        self.info.take().unwrap_or_else(|| ExecutorStartupInfo::new())
    }
}

impl ::protobuf::Message for GetExecutorStartupInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetExecutorStartupInfoResponse {
        GetExecutorStartupInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExecutorStartupInfo>>(
                    "info",
                    |m: &GetExecutorStartupInfoResponse| { &m.info },
                    |m: &mut GetExecutorStartupInfoResponse| { &mut m.info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetExecutorStartupInfoResponse>(
                    "GetExecutorStartupInfoResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetExecutorStartupInfoResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetExecutorStartupInfoResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetExecutorStartupInfoResponse,
        };
        unsafe {
            instance.get(GetExecutorStartupInfoResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetExecutorStartupInfoResponse {
    fn clear(&mut self) {
        self.info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetExecutorStartupInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExecutorStartupInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecutorStartupInfo {
    // message fields
    pub ledger_info: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfo>,
    pub latest_version: u64,
    pub account_state_root_hash: ::std::vec::Vec<u8>,
    pub ledger_frozen_subtree_hashes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecutorStartupInfo {
    fn default() -> &'a ExecutorStartupInfo {
        <ExecutorStartupInfo as ::protobuf::Message>::default_instance()
    }
}

impl ExecutorStartupInfo {
    pub fn new() -> ExecutorStartupInfo {
        ::std::default::Default::default()
    }

    // .types.LedgerInfo ledger_info = 1;


    pub fn get_ledger_info(&self) -> &super::ledger_info::LedgerInfo {
        self.ledger_info.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfo::default_instance())
    }
    pub fn clear_ledger_info(&mut self) {
        self.ledger_info.clear();
    }

    pub fn has_ledger_info(&self) -> bool {
        self.ledger_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info(&mut self, v: super::ledger_info::LedgerInfo) {
        self.ledger_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info(&mut self) -> &mut super::ledger_info::LedgerInfo {
        if self.ledger_info.is_none() {
            self.ledger_info.set_default();
        }
        self.ledger_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info(&mut self) -> super::ledger_info::LedgerInfo {
        self.ledger_info.take().unwrap_or_else(|| super::ledger_info::LedgerInfo::new())
    }

    // uint64 latest_version = 2;


    pub fn get_latest_version(&self) -> u64 {
        self.latest_version
    }
    pub fn clear_latest_version(&mut self) {
        self.latest_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_latest_version(&mut self, v: u64) {
        self.latest_version = v;
    }

    // bytes account_state_root_hash = 3;


    pub fn get_account_state_root_hash(&self) -> &[u8] {
        &self.account_state_root_hash
    }
    pub fn clear_account_state_root_hash(&mut self) {
        self.account_state_root_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_state_root_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.account_state_root_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_state_root_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.account_state_root_hash
    }

    // Take field
    pub fn take_account_state_root_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.account_state_root_hash, ::std::vec::Vec::new())
    }

    // repeated bytes ledger_frozen_subtree_hashes = 4;


    pub fn get_ledger_frozen_subtree_hashes(&self) -> &[::std::vec::Vec<u8>] {
        &self.ledger_frozen_subtree_hashes
    }
    pub fn clear_ledger_frozen_subtree_hashes(&mut self) {
        self.ledger_frozen_subtree_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_ledger_frozen_subtree_hashes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.ledger_frozen_subtree_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ledger_frozen_subtree_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.ledger_frozen_subtree_hashes
    }

    // Take field
    pub fn take_ledger_frozen_subtree_hashes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.ledger_frozen_subtree_hashes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExecutorStartupInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.latest_version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.account_state_root_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.ledger_frozen_subtree_hashes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.latest_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.latest_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account_state_root_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.account_state_root_hash);
        }
        for value in &self.ledger_frozen_subtree_hashes {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.latest_version != 0 {
            os.write_uint64(2, self.latest_version)?;
        }
        if !self.account_state_root_hash.is_empty() {
            os.write_bytes(3, &self.account_state_root_hash)?;
        }
        for v in &self.ledger_frozen_subtree_hashes {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecutorStartupInfo {
        ExecutorStartupInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfo>>(
                    "ledger_info",
                    |m: &ExecutorStartupInfo| { &m.ledger_info },
                    |m: &mut ExecutorStartupInfo| { &mut m.ledger_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "latest_version",
                    |m: &ExecutorStartupInfo| { &m.latest_version },
                    |m: &mut ExecutorStartupInfo| { &mut m.latest_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "account_state_root_hash",
                    |m: &ExecutorStartupInfo| { &m.account_state_root_hash },
                    |m: &mut ExecutorStartupInfo| { &mut m.account_state_root_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ledger_frozen_subtree_hashes",
                    |m: &ExecutorStartupInfo| { &m.ledger_frozen_subtree_hashes },
                    |m: &mut ExecutorStartupInfo| { &mut m.ledger_frozen_subtree_hashes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExecutorStartupInfo>(
                    "ExecutorStartupInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecutorStartupInfo {
        static mut instance: ::protobuf::lazy::Lazy<ExecutorStartupInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExecutorStartupInfo,
        };
        unsafe {
            instance.get(ExecutorStartupInfo::new)
        }
    }
}

impl ::protobuf::Clear for ExecutorStartupInfo {
    fn clear(&mut self) {
        self.ledger_info.clear();
        self.latest_version = 0;
        self.account_state_root_hash.clear();
        self.ledger_frozen_subtree_hashes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecutorStartupInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutorStartupInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rstorage.proto\x12\x07storage\x1a\x14get_with_proof.proto\x1a\x11ledg\
    er_info.proto\x1a\x11transaction.proto\x1a\x18account_state_blob.proto\
    \x1a\x0bproof.proto\"\xe0\x01\n\x17SaveTransactionsRequest\x12@\n\x0etxn\
    s_to_commit\x18\x01\x20\x03(\x0b2\x1a.types.TransactionToCommitR\x0ctxns\
    ToCommit\x12#\n\rfirst_version\x18\x02\x20\x01(\x04R\x0cfirstVersion\x12\
    ^\n\x1bledger_info_with_signatures\x18\x03\x20\x01(\x0b2\x1f.types.Ledge\
    rInfoWithSignaturesR\x18ledgerInfoWithSignatures\"\x1a\n\x18SaveTransact\
    ionsResponse\"\xa6\x01\n\x16GetTransactionsRequest\x12#\n\rstart_version\
    \x18\x01\x20\x01(\x04R\x0cstartVersion\x12\x1d\n\nbatch_size\x18\x02\x20\
    \x01(\x04R\tbatchSize\x12%\n\x0eledger_version\x18\x03\x20\x01(\x04R\rle\
    dgerVersion\x12!\n\x0cfetch_events\x18\x04\x20\x01(\x08R\x0bfetchEvents\
    \"i\n\x17GetTransactionsResponse\x12N\n\x13txn_list_with_proof\x18\x01\
    \x20\x01(\x0b2\x1f.types.TransactionListWithProofR\x10txnListWithProof\"\
    n\n*GetAccountStateWithProofByStateRootRequest\x12\x18\n\x07address\x18\
    \x01\x20\x01(\x0cR\x07address\x12&\n\x0fstate_root_hash\x18\x02\x20\x01(\
    \x0cR\rstateRootHash\"\xbe\x01\n+GetAccountStateWithProofByStateRootResp\
    onse\x12E\n\x12account_state_blob\x18\x01\x20\x01(\x0b2\x17.types.Accoun\
    tStateBlobR\x10accountStateBlob\x12H\n\x13sparse_merkle_proof\x18\x02\
    \x20\x01(\x0b2\x18.types.SparseMerkleProofR\x11sparseMerkleProof\"\x1f\n\
    \x1dGetExecutorStartupInfoRequest\"R\n\x1eGetExecutorStartupInfoResponse\
    \x120\n\x04info\x18\x01\x20\x01(\x0b2\x1c.storage.ExecutorStartupInfoR\
    \x04info\"\xe8\x01\n\x13ExecutorStartupInfo\x122\n\x0bledger_info\x18\
    \x01\x20\x01(\x0b2\x11.types.LedgerInfoR\nledgerInfo\x12%\n\x0elatest_ve\
    rsion\x18\x02\x20\x01(\x04R\rlatestVersion\x125\n\x17account_state_root_\
    hash\x18\x03\x20\x01(\x0cR\x14accountStateRootHash\x12?\n\x1cledger_froz\
    en_subtree_hashes\x18\x04\x20\x03(\x0cR\x19ledgerFrozenSubtreeHashes2\
    \x97\x04\n\x07Storage\x12W\n\x10SaveTransactions\x12\x20.storage.SaveTra\
    nsactionsRequest\x1a!.storage.SaveTransactionsResponse\x12_\n\x14UpdateT\
    oLatestLedger\x12\".types.UpdateToLatestLedgerRequest\x1a#.types.UpdateT\
    oLatestLedgerResponse\x12T\n\x0fGetTransactions\x12\x1f.storage.GetTrans\
    actionsRequest\x1a\x20.storage.GetTransactionsResponse\x12\x90\x01\n#Get\
    AccountStateWithProofByStateRoot\x123.storage.GetAccountStateWithProofBy\
    StateRootRequest\x1a4.storage.GetAccountStateWithProofByStateRootRespons\
    e\x12i\n\x16GetExecutorStartupInfo\x12&.storage.GetExecutorStartupInfoRe\
    quest\x1a'.storage.GetExecutorStartupInfoResponseb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
