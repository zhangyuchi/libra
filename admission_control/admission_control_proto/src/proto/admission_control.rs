// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `admission_control.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct SubmitTransactionRequest {
    // message fields
    pub signed_txn: ::protobuf::SingularPtrField<super::transaction::SignedTransaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitTransactionRequest {
    fn default() -> &'a SubmitTransactionRequest {
        <SubmitTransactionRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubmitTransactionRequest {
    pub fn new() -> SubmitTransactionRequest {
        ::std::default::Default::default()
    }

    // .types.SignedTransaction signed_txn = 1;


    pub fn get_signed_txn(&self) -> &super::transaction::SignedTransaction {
        self.signed_txn.as_ref().unwrap_or_else(|| super::transaction::SignedTransaction::default_instance())
    }
    pub fn clear_signed_txn(&mut self) {
        self.signed_txn.clear();
    }

    pub fn has_signed_txn(&self) -> bool {
        self.signed_txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_txn(&mut self, v: super::transaction::SignedTransaction) {
        self.signed_txn = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_txn(&mut self) -> &mut super::transaction::SignedTransaction {
        if self.signed_txn.is_none() {
            self.signed_txn.set_default();
        }
        self.signed_txn.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_txn(&mut self) -> super::transaction::SignedTransaction {
        self.signed_txn.take().unwrap_or_else(|| super::transaction::SignedTransaction::new())
    }
}

impl ::protobuf::Message for SubmitTransactionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_txn {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_txn)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_txn.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_txn.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitTransactionRequest {
        SubmitTransactionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::SignedTransaction>>(
                    "signed_txn",
                    |m: &SubmitTransactionRequest| { &m.signed_txn },
                    |m: &mut SubmitTransactionRequest| { &mut m.signed_txn },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SubmitTransactionRequest>(
                    "SubmitTransactionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubmitTransactionRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubmitTransactionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubmitTransactionRequest,
        };
        unsafe {
            instance.get(SubmitTransactionRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubmitTransactionRequest {
    fn clear(&mut self) {
        self.signed_txn.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitTransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitTransactionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdmissionControlStatus {
    // message fields
    pub code: AdmissionControlStatusCode,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdmissionControlStatus {
    fn default() -> &'a AdmissionControlStatus {
        <AdmissionControlStatus as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionControlStatus {
    pub fn new() -> AdmissionControlStatus {
        ::std::default::Default::default()
    }

    // .admission_control.AdmissionControlStatusCode code = 1;


    pub fn get_code(&self) -> AdmissionControlStatusCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = AdmissionControlStatusCode::Accepted;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: AdmissionControlStatusCode) {
        self.code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AdmissionControlStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != AdmissionControlStatusCode::Accepted {
            my_size += ::protobuf::rt::enum_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.code != AdmissionControlStatusCode::Accepted {
            os.write_enum(1, self.code.value())?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdmissionControlStatus {
        AdmissionControlStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AdmissionControlStatusCode>>(
                    "code",
                    |m: &AdmissionControlStatus| { &m.code },
                    |m: &mut AdmissionControlStatus| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &AdmissionControlStatus| { &m.message },
                    |m: &mut AdmissionControlStatus| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AdmissionControlStatus>(
                    "AdmissionControlStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AdmissionControlStatus {
        static mut instance: ::protobuf::lazy::Lazy<AdmissionControlStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AdmissionControlStatus,
        };
        unsafe {
            instance.get(AdmissionControlStatus::new)
        }
    }
}

impl ::protobuf::Clear for AdmissionControlStatus {
    fn clear(&mut self) {
        self.code = AdmissionControlStatusCode::Accepted;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdmissionControlStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControlStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubmitTransactionResponse {
    // message fields
    pub validator_id: ::std::vec::Vec<u8>,
    // message oneof groups
    pub status: ::std::option::Option<SubmitTransactionResponse_oneof_status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitTransactionResponse {
    fn default() -> &'a SubmitTransactionResponse {
        <SubmitTransactionResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SubmitTransactionResponse_oneof_status {
    vm_status(super::vm_errors::VMStatus),
    ac_status(AdmissionControlStatus),
    mempool_status(super::mempool_status::MempoolAddTransactionStatus),
}

impl SubmitTransactionResponse {
    pub fn new() -> SubmitTransactionResponse {
        ::std::default::Default::default()
    }

    // .types.VMStatus vm_status = 1;


    pub fn get_vm_status(&self) -> &super::vm_errors::VMStatus {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(ref v)) => v,
            _ => super::vm_errors::VMStatus::default_instance(),
        }
    }
    pub fn clear_vm_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_vm_status(&self) -> bool {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vm_status(&mut self, v: super::vm_errors::VMStatus) {
        self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vm_status(&mut self) -> &mut super::vm_errors::VMStatus {
        if let ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(_)) = self.status {
        } else {
            self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(super::vm_errors::VMStatus::new()));
        }
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vm_status(&mut self) -> super::vm_errors::VMStatus {
        if self.has_vm_status() {
            match self.status.take() {
                ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(v)) => v,
                _ => panic!(),
            }
        } else {
            super::vm_errors::VMStatus::new()
        }
    }

    // .admission_control.AdmissionControlStatus ac_status = 2;


    pub fn get_ac_status(&self) -> &AdmissionControlStatus {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(ref v)) => v,
            _ => AdmissionControlStatus::default_instance(),
        }
    }
    pub fn clear_ac_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_ac_status(&self) -> bool {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ac_status(&mut self, v: AdmissionControlStatus) {
        self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ac_status(&mut self) -> &mut AdmissionControlStatus {
        if let ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(_)) = self.status {
        } else {
            self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(AdmissionControlStatus::new()));
        }
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ac_status(&mut self) -> AdmissionControlStatus {
        if self.has_ac_status() {
            match self.status.take() {
                ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(v)) => v,
                _ => panic!(),
            }
        } else {
            AdmissionControlStatus::new()
        }
    }

    // .mempool.MempoolAddTransactionStatus mempool_status = 3;


    pub fn get_mempool_status(&self) -> &super::mempool_status::MempoolAddTransactionStatus {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(ref v)) => v,
            _ => super::mempool_status::MempoolAddTransactionStatus::default_instance(),
        }
    }
    pub fn clear_mempool_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_mempool_status(&self) -> bool {
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mempool_status(&mut self, v: super::mempool_status::MempoolAddTransactionStatus) {
        self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mempool_status(&mut self) -> &mut super::mempool_status::MempoolAddTransactionStatus {
        if let ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(_)) = self.status {
        } else {
            self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(super::mempool_status::MempoolAddTransactionStatus::new()));
        }
        match self.status {
            ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mempool_status(&mut self) -> super::mempool_status::MempoolAddTransactionStatus {
        if self.has_mempool_status() {
            match self.status.take() {
                ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(v)) => v,
                _ => panic!(),
            }
        } else {
            super::mempool_status::MempoolAddTransactionStatus::new()
        }
    }

    // bytes validator_id = 4;


    pub fn get_validator_id(&self) -> &[u8] {
        &self.validator_id
    }
    pub fn clear_validator_id(&mut self) {
        self.validator_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_id
    }

    // Take field
    pub fn take_validator_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SubmitTransactionResponse {
    fn is_initialized(&self) -> bool {
        if let Some(SubmitTransactionResponse_oneof_status::vm_status(ref v)) = self.status {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SubmitTransactionResponse_oneof_status::ac_status(ref v)) = self.status {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SubmitTransactionResponse_oneof_status::mempool_status(ref v)) = self.status {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::vm_status(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::ac_status(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.status = ::std::option::Option::Some(SubmitTransactionResponse_oneof_status::mempool_status(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.validator_id);
        }
        if let ::std::option::Option::Some(ref v) = self.status {
            match v {
                &SubmitTransactionResponse_oneof_status::vm_status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SubmitTransactionResponse_oneof_status::ac_status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SubmitTransactionResponse_oneof_status::mempool_status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_id.is_empty() {
            os.write_bytes(4, &self.validator_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.status {
            match v {
                &SubmitTransactionResponse_oneof_status::vm_status(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SubmitTransactionResponse_oneof_status::ac_status(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SubmitTransactionResponse_oneof_status::mempool_status(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitTransactionResponse {
        SubmitTransactionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::vm_errors::VMStatus>(
                    "vm_status",
                    SubmitTransactionResponse::has_vm_status,
                    SubmitTransactionResponse::get_vm_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AdmissionControlStatus>(
                    "ac_status",
                    SubmitTransactionResponse::has_ac_status,
                    SubmitTransactionResponse::get_ac_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::mempool_status::MempoolAddTransactionStatus>(
                    "mempool_status",
                    SubmitTransactionResponse::has_mempool_status,
                    SubmitTransactionResponse::get_mempool_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "validator_id",
                    |m: &SubmitTransactionResponse| { &m.validator_id },
                    |m: &mut SubmitTransactionResponse| { &mut m.validator_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SubmitTransactionResponse>(
                    "SubmitTransactionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubmitTransactionResponse {
        static mut instance: ::protobuf::lazy::Lazy<SubmitTransactionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubmitTransactionResponse,
        };
        unsafe {
            instance.get(SubmitTransactionResponse::new)
        }
    }
}

impl ::protobuf::Clear for SubmitTransactionResponse {
    fn clear(&mut self) {
        self.status = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.validator_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitTransactionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitTransactionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AdmissionControlStatusCode {
    Accepted = 0,
    Blacklisted = 1,
    Rejected = 2,
}

impl ::protobuf::ProtobufEnum for AdmissionControlStatusCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AdmissionControlStatusCode> {
        match value {
            0 => ::std::option::Option::Some(AdmissionControlStatusCode::Accepted),
            1 => ::std::option::Option::Some(AdmissionControlStatusCode::Blacklisted),
            2 => ::std::option::Option::Some(AdmissionControlStatusCode::Rejected),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AdmissionControlStatusCode] = &[
            AdmissionControlStatusCode::Accepted,
            AdmissionControlStatusCode::Blacklisted,
            AdmissionControlStatusCode::Rejected,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AdmissionControlStatusCode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AdmissionControlStatusCode {
}

impl ::std::default::Default for AdmissionControlStatusCode {
    fn default() -> Self {
        AdmissionControlStatusCode::Accepted
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControlStatusCode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17admission_control.proto\x12\x11admission_control\x1a\x14get_with_p\
    roof.proto\x1a\x14mempool_status.proto\x1a\x11transaction.proto\x1a\x0fv\
    m_errors.proto\"S\n\x18SubmitTransactionRequest\x127\n\nsigned_txn\x18\
    \x01\x20\x01(\x0b2\x18.types.SignedTransactionR\tsignedTxn\"u\n\x16Admis\
    sionControlStatus\x12A\n\x04code\x18\x01\x20\x01(\x0e2-.admission_contro\
    l.AdmissionControlStatusCodeR\x04code\x12\x18\n\x07message\x18\x02\x20\
    \x01(\tR\x07message\"\x91\x02\n\x19SubmitTransactionResponse\x12.\n\tvm_\
    status\x18\x01\x20\x01(\x0b2\x0f.types.VMStatusH\0R\x08vmStatus\x12H\n\t\
    ac_status\x18\x02\x20\x01(\x0b2).admission_control.AdmissionControlStatu\
    sH\0R\x08acStatus\x12M\n\x0emempool_status\x18\x03\x20\x01(\x0b2$.mempoo\
    l.MempoolAddTransactionStatusH\0R\rmempoolStatus\x12!\n\x0cvalidator_id\
    \x18\x04\x20\x01(\x0cR\x0bvalidatorIdB\x08\n\x06status*I\n\x1aAdmissionC\
    ontrolStatusCode\x12\x0c\n\x08Accepted\x10\0\x12\x0f\n\x0bBlacklisted\
    \x10\x01\x12\x0c\n\x08Rejected\x10\x022\xe7\x01\n\x10AdmissionControl\
    \x12p\n\x11SubmitTransaction\x12+.admission_control.SubmitTransactionReq\
    uest\x1a,.admission_control.SubmitTransactionResponse\"\0\x12a\n\x14Upda\
    teToLatestLedger\x12\".types.UpdateToLatestLedgerRequest\x1a#.types.Upda\
    teToLatestLedgerResponse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
