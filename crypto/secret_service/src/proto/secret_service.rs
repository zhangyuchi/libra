// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `secret_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct GenerateKeyRequest {
    // message fields
    pub spec: KeyType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateKeyRequest {
    fn default() -> &'a GenerateKeyRequest {
        <GenerateKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateKeyRequest {
    pub fn new() -> GenerateKeyRequest {
        ::std::default::Default::default()
    }

    // .secret_service.KeyType spec = 1;


    pub fn get_spec(&self) -> KeyType {
        self.spec
    }
    pub fn clear_spec(&mut self) {
        self.spec = KeyType::Ed25519;
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: KeyType) {
        self.spec = v;
    }
}

impl ::protobuf::Message for GenerateKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.spec, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.spec != KeyType::Ed25519 {
            my_size += ::protobuf::rt::enum_size(1, self.spec);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.spec != KeyType::Ed25519 {
            os.write_enum(1, self.spec.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateKeyRequest {
        GenerateKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<KeyType>>(
                    "spec",
                    |m: &GenerateKeyRequest| { &m.spec },
                    |m: &mut GenerateKeyRequest| { &mut m.spec },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GenerateKeyRequest>(
                    "GenerateKeyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GenerateKeyRequest {
        static mut instance: ::protobuf::lazy::Lazy<GenerateKeyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GenerateKeyRequest,
        };
        unsafe {
            instance.get(GenerateKeyRequest::new)
        }
    }
}

impl ::protobuf::Clear for GenerateKeyRequest {
    fn clear(&mut self) {
        self.spec = KeyType::Ed25519;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateKeyResponse {
    // message fields
    pub key_id: ::std::vec::Vec<u8>,
    pub code: ErrorCode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateKeyResponse {
    fn default() -> &'a GenerateKeyResponse {
        <GenerateKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenerateKeyResponse {
    pub fn new() -> GenerateKeyResponse {
        ::std::default::Default::default()
    }

    // bytes key_id = 1;


    pub fn get_key_id(&self) -> &[u8] {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key_id, ::std::vec::Vec::new())
    }

    // .secret_service.ErrorCode code = 2;


    pub fn get_code(&self) -> ErrorCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = ErrorCode::Success;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ErrorCode) {
        self.code = v;
    }
}

impl ::protobuf::Message for GenerateKeyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key_id);
        }
        if self.code != ErrorCode::Success {
            my_size += ::protobuf::rt::enum_size(2, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key_id.is_empty() {
            os.write_bytes(1, &self.key_id)?;
        }
        if self.code != ErrorCode::Success {
            os.write_enum(2, self.code.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateKeyResponse {
        GenerateKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key_id",
                    |m: &GenerateKeyResponse| { &m.key_id },
                    |m: &mut GenerateKeyResponse| { &mut m.key_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorCode>>(
                    "code",
                    |m: &GenerateKeyResponse| { &m.code },
                    |m: &mut GenerateKeyResponse| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GenerateKeyResponse>(
                    "GenerateKeyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GenerateKeyResponse {
        static mut instance: ::protobuf::lazy::Lazy<GenerateKeyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GenerateKeyResponse,
        };
        unsafe {
            instance.get(GenerateKeyResponse::new)
        }
    }
}

impl ::protobuf::Clear for GenerateKeyResponse {
    fn clear(&mut self) {
        self.key_id.clear();
        self.code = ErrorCode::Success;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublicKeyRequest {
    // message fields
    pub key_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublicKeyRequest {
    fn default() -> &'a PublicKeyRequest {
        <PublicKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl PublicKeyRequest {
    pub fn new() -> PublicKeyRequest {
        ::std::default::Default::default()
    }

    // bytes key_id = 1;


    pub fn get_key_id(&self) -> &[u8] {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PublicKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key_id.is_empty() {
            os.write_bytes(1, &self.key_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublicKeyRequest {
        PublicKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key_id",
                    |m: &PublicKeyRequest| { &m.key_id },
                    |m: &mut PublicKeyRequest| { &mut m.key_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PublicKeyRequest>(
                    "PublicKeyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PublicKeyRequest {
        static mut instance: ::protobuf::lazy::Lazy<PublicKeyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PublicKeyRequest,
        };
        unsafe {
            instance.get(PublicKeyRequest::new)
        }
    }
}

impl ::protobuf::Clear for PublicKeyRequest {
    fn clear(&mut self) {
        self.key_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublicKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublicKeyResponse {
    // message fields
    pub public_key: ::std::vec::Vec<u8>,
    pub code: ErrorCode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublicKeyResponse {
    fn default() -> &'a PublicKeyResponse {
        <PublicKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl PublicKeyResponse {
    pub fn new() -> PublicKeyResponse {
        ::std::default::Default::default()
    }

    // bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    // .secret_service.ErrorCode code = 2;


    pub fn get_code(&self) -> ErrorCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = ErrorCode::Success;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ErrorCode) {
        self.code = v;
    }
}

impl ::protobuf::Message for PublicKeyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public_key);
        }
        if self.code != ErrorCode::Success {
            my_size += ::protobuf::rt::enum_size(2, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_bytes(1, &self.public_key)?;
        }
        if self.code != ErrorCode::Success {
            os.write_enum(2, self.code.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublicKeyResponse {
        PublicKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &PublicKeyResponse| { &m.public_key },
                    |m: &mut PublicKeyResponse| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorCode>>(
                    "code",
                    |m: &PublicKeyResponse| { &m.code },
                    |m: &mut PublicKeyResponse| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PublicKeyResponse>(
                    "PublicKeyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PublicKeyResponse {
        static mut instance: ::protobuf::lazy::Lazy<PublicKeyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PublicKeyResponse,
        };
        unsafe {
            instance.get(PublicKeyResponse::new)
        }
    }
}

impl ::protobuf::Clear for PublicKeyResponse {
    fn clear(&mut self) {
        self.public_key.clear();
        self.code = ErrorCode::Success;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublicKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignRequest {
    // message fields
    pub key_id: ::std::vec::Vec<u8>,
    pub message_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignRequest {
    fn default() -> &'a SignRequest {
        <SignRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignRequest {
    pub fn new() -> SignRequest {
        ::std::default::Default::default()
    }

    // bytes key_id = 1;


    pub fn get_key_id(&self) -> &[u8] {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key_id, ::std::vec::Vec::new())
    }

    // bytes message_hash = 2;


    pub fn get_message_hash(&self) -> &[u8] {
        &self.message_hash
    }
    pub fn clear_message_hash(&mut self) {
        self.message_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message_hash
    }

    // Take field
    pub fn take_message_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key_id);
        }
        if !self.message_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.message_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key_id.is_empty() {
            os.write_bytes(1, &self.key_id)?;
        }
        if !self.message_hash.is_empty() {
            os.write_bytes(2, &self.message_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignRequest {
        SignRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key_id",
                    |m: &SignRequest| { &m.key_id },
                    |m: &mut SignRequest| { &mut m.key_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message_hash",
                    |m: &SignRequest| { &m.message_hash },
                    |m: &mut SignRequest| { &mut m.message_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignRequest>(
                    "SignRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignRequest {
        static mut instance: ::protobuf::lazy::Lazy<SignRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignRequest,
        };
        unsafe {
            instance.get(SignRequest::new)
        }
    }
}

impl ::protobuf::Clear for SignRequest {
    fn clear(&mut self) {
        self.key_id.clear();
        self.message_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignResponse {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    pub code: ErrorCode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignResponse {
    fn default() -> &'a SignResponse {
        <SignResponse as ::protobuf::Message>::default_instance()
    }
}

impl SignResponse {
    pub fn new() -> SignResponse {
        ::std::default::Default::default()
    }

    // bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // .secret_service.ErrorCode code = 2;


    pub fn get_code(&self) -> ErrorCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = ErrorCode::Success;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ErrorCode) {
        self.code = v;
    }
}

impl ::protobuf::Message for SignResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if self.code != ErrorCode::Success {
            my_size += ::protobuf::rt::enum_size(2, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if self.code != ErrorCode::Success {
            os.write_enum(2, self.code.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignResponse {
        SignResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &SignResponse| { &m.signature },
                    |m: &mut SignResponse| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorCode>>(
                    "code",
                    |m: &SignResponse| { &m.code },
                    |m: &mut SignResponse| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignResponse>(
                    "SignResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignResponse {
        static mut instance: ::protobuf::lazy::Lazy<SignResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignResponse,
        };
        unsafe {
            instance.get(SignResponse::new)
        }
    }
}

impl ::protobuf::Clear for SignResponse {
    fn clear(&mut self) {
        self.signature.clear();
        self.code = ErrorCode::Success;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    Success = 0,
    KeyIdNotFound = 1,
    WrongLength = 2,
    InvalidParameters = 3,
    AuthenticationFailed = 4,
    Unspecified = 5,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::Success),
            1 => ::std::option::Option::Some(ErrorCode::KeyIdNotFound),
            2 => ::std::option::Option::Some(ErrorCode::WrongLength),
            3 => ::std::option::Option::Some(ErrorCode::InvalidParameters),
            4 => ::std::option::Option::Some(ErrorCode::AuthenticationFailed),
            5 => ::std::option::Option::Some(ErrorCode::Unspecified),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::Success,
            ErrorCode::KeyIdNotFound,
            ErrorCode::WrongLength,
            ErrorCode::InvalidParameters,
            ErrorCode::AuthenticationFailed,
            ErrorCode::Unspecified,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ErrorCode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::Success
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum KeyType {
    Ed25519 = 0,
    BLS12381 = 1,
}

impl ::protobuf::ProtobufEnum for KeyType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KeyType> {
        match value {
            0 => ::std::option::Option::Some(KeyType::Ed25519),
            1 => ::std::option::Option::Some(KeyType::BLS12381),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KeyType] = &[
            KeyType::Ed25519,
            KeyType::BLS12381,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("KeyType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for KeyType {
}

impl ::std::default::Default for KeyType {
    fn default() -> Self {
        KeyType::Ed25519
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14secret_service.proto\x12\x0esecret_service\"A\n\x12GenerateKeyRequ\
    est\x12+\n\x04spec\x18\x01\x20\x01(\x0e2\x17.secret_service.KeyTypeR\x04\
    spec\"[\n\x13GenerateKeyResponse\x12\x15\n\x06key_id\x18\x01\x20\x01(\
    \x0cR\x05keyId\x12-\n\x04code\x18\x02\x20\x01(\x0e2\x19.secret_service.E\
    rrorCodeR\x04code\")\n\x10PublicKeyRequest\x12\x15\n\x06key_id\x18\x01\
    \x20\x01(\x0cR\x05keyId\"a\n\x11PublicKeyResponse\x12\x1d\n\npublic_key\
    \x18\x01\x20\x01(\x0cR\tpublicKey\x12-\n\x04code\x18\x02\x20\x01(\x0e2\
    \x19.secret_service.ErrorCodeR\x04code\"G\n\x0bSignRequest\x12\x15\n\x06\
    key_id\x18\x01\x20\x01(\x0cR\x05keyId\x12!\n\x0cmessage_hash\x18\x02\x20\
    \x01(\x0cR\x0bmessageHash\"[\n\x0cSignResponse\x12\x1c\n\tsignature\x18\
    \x01\x20\x01(\x0cR\tsignature\x12-\n\x04code\x18\x02\x20\x01(\x0e2\x19.s\
    ecret_service.ErrorCodeR\x04code*~\n\tErrorCode\x12\x0b\n\x07Success\x10\
    \0\x12\x11\n\rKeyIdNotFound\x10\x01\x12\x0f\n\x0bWrongLength\x10\x02\x12\
    \x15\n\x11InvalidParameters\x10\x03\x12\x18\n\x14AuthenticationFailed\
    \x10\x04\x12\x0f\n\x0bUnspecified\x10\x05*$\n\x07KeyType\x12\x0b\n\x07Ed\
    25519\x10\0\x12\x0c\n\x08BLS12381\x10\x012\x85\x02\n\rSecretService\x12X\
    \n\x0bGenerateKey\x12\".secret_service.GenerateKeyRequest\x1a#.secret_se\
    rvice.GenerateKeyResponse\"\0\x12U\n\x0cGetPublicKey\x12\x20.secret_serv\
    ice.PublicKeyRequest\x1a!.secret_service.PublicKeyResponse\"\0\x12C\n\
    \x04Sign\x12\x1b.secret_service.SignRequest\x1a\x1c.secret_service.SignR\
    esponse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
